<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PA&#39;s Blog</title>
  
  <subtitle>pa@f534</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pa.radonyl.xyz/"/>
  <updated>2019-12-01T12:17:34.141Z</updated>
  <id>http://pa.radonyl.xyz/</id>
  
  <author>
    <name>Puzzled Alex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>📡 802.11g 发射机 | 调试与测试</title>
    <link href="http://pa.radonyl.xyz/2019/12/01/802-11g-Transmitter-validate-and-debug/"/>
    <id>http://pa.radonyl.xyz/2019/12/01/802-11g-Transmitter-validate-and-debug/</id>
    <published>2019-12-01T09:15:26.000Z</published>
    <updated>2019-12-01T12:17:34.141Z</updated>
    
    <content type="html"><![CDATA[<p>分模块设计完成后，需要进行组装和调试。按照框图将模块级联，接下来对模块的时序、数据完整性和数据正确性在仿真层面上进行验证。仿真验证通过后，将所有的模块打包成Tx80211自定义IP核，加入AD9361的IP核Block Design，进行接下来的板上验证。<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/31512-draft-bd" alt="31512-draft-bd"></p><h1 id="发射机Modelsim仿真验证"><a href="#发射机Modelsim仿真验证" class="headerlink" title="发射机Modelsim仿真验证"></a>发射机Modelsim仿真验证</h1><p>首先使用matlab构造802.11g数据包，导出基带二进制流和生成好的基带信号。将matlab的基带二进制流储存在Tx_Ram中，并编写testbench，接下来在modelsim中进行基带数据生成器的全仿真。通过Modelsim观察并导出生成的波形，再将生成的波形与Matlab生成的标准数据进行比较。</p><h4 id="Testbench"><a href="#Testbench" class="headerlink" title="Testbench"></a>Testbench</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wire</span> [<span class="number">23</span>:<span class="number">0</span>] SIGNAL;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] ram_addr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] DATA;</span><br><span class="line">tx_ram TxRam(</span><br><span class="line">    <span class="variable">.addr</span>(ram_addr),</span><br><span class="line">    <span class="variable">.SIGNAL</span>(SIGNAL),</span><br><span class="line">    <span class="variable">.DATA</span>(fifo_din)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    sim_idx = <span class="number">0</span>;</span><br><span class="line">    # <span class="number">40000</span>; <span class="comment">// wait clock to lock</span></span><br><span class="line">    <span class="keyword">repeat</span>(<span class="number">2</span>) <span class="keyword">begin</span></span><br><span class="line">        @(<span class="keyword">posedge</span> clk)</span><br><span class="line">        s_config_tdata[<span class="number">23</span>:<span class="number">0</span>] = SIGNAL;</span><br><span class="line">        s_config_tvalid      = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">66</span>; idx = idx + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            ram_addr   = idx;</span><br><span class="line">            fifo_wr_en = <span class="number">1</span>;</span><br><span class="line">            @(<span class="keyword">posedge</span> clk);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        fifo_wr_en = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (busy) @(<span class="keyword">posedge</span> clk);</span><br><span class="line">        @(<span class="keyword">posedge</span> clk);</span><br><span class="line">        tx_now = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">repeat</span>(<span class="number">20</span>) @(<span class="keyword">posedge</span> clk);</span><br><span class="line">        tx_now = <span class="number">0</span>;</span><br><span class="line">        # <span class="number">2000</span></span><br><span class="line">        <span class="keyword">while</span> (tx_data_valid) @(<span class="keyword">posedge</span> clk);</span><br><span class="line">        sim_idx = sim_idx + <span class="number">1</span>;</span><br><span class="line">        # <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Tx-Ram-节选"><a href="#Tx-Ram-节选" class="headerlink" title="Tx Ram(节选)"></a>Tx Ram(节选)</h4><p>用于储存发射二进制基带数据的Verilog文件，由matlab导出的二进制流数据生成。<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> tx_ram(<span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] addr,</span><br><span class="line">              <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">23</span>:<span class="number">0</span>] SIGNAL,</span><br><span class="line">              <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] DATA);</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] data_ram [<span class="number">100</span>:<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">integer</span> i;</span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">// zeroing ram</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">101</span>; i = i + <span class="number">1</span>)</span><br><span class="line">            data_ram[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// load data</span></span><br><span class="line">        <span class="comment">// generated at Sat Nov 23 17:41:48 2019 from file: E:\matlab_bb.txt</span></span><br><span class="line">        SIGNAL = <span class="number">24'b000000000000100000001011</span>; <span class="comment">// Rate:1101 Len:64</span></span><br><span class="line">        data_ram[<span class="number">0</span>] = <span class="number">0'b00000000</span>; <span class="comment">// 0x00</span></span><br><span class="line">        data_ram[<span class="number">1</span>] = <span class="number">0'b00000000</span>; <span class="comment">// 0x00</span></span><br><span class="line">        data_ram[<span class="number">2</span>] = <span class="number">8'b10000000</span>; <span class="comment">// 0x80</span></span><br><span class="line">        data_ram[<span class="number">3</span>] = <span class="number">8'b00000010</span>; <span class="comment">// 0x02</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        data_ram[<span class="number">62</span>] = <span class="number">8'b00111110</span>; <span class="comment">// 0x3e</span></span><br><span class="line">        data_ram[<span class="number">63</span>] = <span class="number">8'b10101010</span>; <span class="comment">// 0xaa</span></span><br><span class="line">        data_ram[<span class="number">64</span>] = <span class="number">8'b11101111</span>; <span class="comment">// 0xef</span></span><br><span class="line">        data_ram[<span class="number">65</span>] = <span class="number">8'b10111100</span>; <span class="comment">// 0xbc</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        DATA = data_ram[addr];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></p><h4 id="Modelsim-基带数据全仿真结果"><a href="#Modelsim-基带数据全仿真结果" class="headerlink" title="Modelsim 基带数据全仿真结果"></a>Modelsim 基带数据全仿真结果</h4><p>设置modelsim捕捉各模块信号，按照扰码-&gt;卷积编码-&gt;交织-&gt;星座映射-&gt;添加导频-&gt;IFFT-&gt;加窗的顺序排列信号，观察信号传递时序是否正确，数据是否完整。<br>将<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/bb-signal-gen-modelsim-total-1" alt="bb-signal-gen-modelsim-total-1"></p><h4 id="基带信号发生器与Matlab标准数据对比"><a href="#基带信号发生器与Matlab标准数据对比" class="headerlink" title="基带信号发生器与Matlab标准数据对比"></a>基带信号发生器与Matlab标准数据对比</h4><p>将数据导出后与matlab生成的标准发射信号进行对比，由于需要对比的数据量较多，使用Python编写了自动比较脚本，其输出结果如下：</p><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/abs-diff-bb-vhdl-vs-matlab" alt="abs-diff-bb-vhdl-vs-matlab"></p><p>结果显示：基带信号发生器产生的发射信号误差在允许范围内，且无错误。</p><h1 id="发射机板上验证"><a href="#发射机板上验证" class="headerlink" title="发射机板上验证"></a>发射机板上验证</h1><p>在通过了Modelsim仿真验证后，将HDL工程综合后添加ILA核，添加相应的信号观察，布线后烧录在FPGA板上。此时Testbench实际上是ZYNQ7处理器中运行的程序，数据通过AXI总线写入Tx80211发射机IP核中的FIFO中，写入完毕后由ZYNQ7发出发射指令。通过设置ILA核触发信号，可定向捕捉所需信号，导出信号后与Matlab产生的标准信号进行对比。在上板调试中发现了之前仿真过程中没有发现的问题，详见下文。</p><p>在修正完所有Bug后，将最后的数据导出并与Matlab数据进行比较：</p><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/abs-diff-bb-ila-vs-matlab" alt="abs-diff-bb-ila-vs-matlab"></p><p>结果显示：基带信号发生器实际产生的发射信号误差在允许范围内，且无错误。</p><h1 id="调试中遇到的问题"><a href="#调试中遇到的问题" class="headerlink" title="调试中遇到的问题"></a>调试中遇到的问题</h1><h4 id="1-卷积编码器帧同步置零问题"><a href="#1-卷积编码器帧同步置零问题" class="headerlink" title="1.卷积编码器帧同步置零问题"></a>1.卷积编码器帧同步置零问题</h4><p><strong>问题现象</strong>:<br>板上调试发现基带数据生成器中，卷积编码器输出的最初6个值与理论不符合，如图所示，其中红色为正确输出。</p><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/problem-conv-encoder-not-reset" alt="problem-conv-encoder-not-reset"></p><p><strong>问题分析</strong><br>经过对比，发现有且仅有最初6个数据与理论不符合，且稳定复现。考虑到卷积编码移位寄存器深度恰好等于6，逆推得到开始卷积前移位寄存器的值应为010110，恰好为上一次基带信号的最后6位。于是得出结论：卷积编码器在处理完一帧数据后没有重置，导致了问题。<br><strong>问题解决</strong><br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/code-conv-encoder-fix-1" alt="code-conv-encoder-fix-1"><br>将卷积编码器的重置与帧开始信号同步，保证在处理每一帧数据前卷积编码器均处于全0状态。</p><h4 id="2-数据域Tail无需扰码需要置零的问题"><a href="#2-数据域Tail无需扰码需要置零的问题" class="headerlink" title="2.数据域Tail无需扰码需要置零的问题"></a>2.数据域Tail无需扰码需要置零的问题</h4><p><strong>问题现象</strong><br>板上调试发现，输出的基带数据最后一个Symbol错误，而之前的所有symbol完全正确。<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/problem-tail-not-zeroed" alt="problem-tail-not-zeroed"><br><strong>问题分析</strong><br>仔细查看802.11协议，在附录G.1发现如下描述：<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/zeroing-tail-bits-desc" alt="zeroing-tail-bits-desc"><br>按照协议，在数据域最后6bit的Tail无需进行扰码，需要置零。而在基带信号生成器中没有考虑到这一点，导致最后一个Symbol发生错误。<br><strong>问题解决</strong><br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/tail-not-zeroed-fix-1" alt="tail-not-zeroed-fix-1"><br>在扰码器模块中添加计数器，同时将计数器与SIGNAL Field的LENGTH进行比较，从而将相应的Tail bits置零。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分模块设计完成后，需要进行组装和调试。按照框图将模块级联，接下来对模块的时序、数据完整性和数据正确性在仿真层面上进行验证。仿真验证通过后，将所有的模块打包成Tx80211自定义IP核，加入AD9361的IP核Block Design，进行接下来的板上验证。&lt;br&gt;&lt;img 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 10.ZYNQ7编程控制基带信号发生器</title>
    <link href="http://pa.radonyl.xyz/2019/11/10/802-11g-Transmitter-10-app-programming/"/>
    <id>http://pa.radonyl.xyz/2019/11/10/802-11g-Transmitter-10-app-programming/</id>
    <published>2019-11-10T09:14:30.000Z</published>
    <updated>2019-12-01T12:22:26.310Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 9.AD9361 IP核</title>
    <link href="http://pa.radonyl.xyz/2019/11/09/802-11g-Transmitter-9-ad9361-hdl/"/>
    <id>http://pa.radonyl.xyz/2019/11/09/802-11g-Transmitter-9-ad9361-hdl/</id>
    <published>2019-11-09T09:13:57.000Z</published>
    <updated>2019-12-01T12:21:32.823Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡802.11g Transmitter|Scrambler</title>
    <link href="http://pa.radonyl.xyz/2019/11/09/Scrambler-f/"/>
    <id>http://pa.radonyl.xyz/2019/11/09/Scrambler-f/</id>
    <published>2019-11-09T01:33:09.000Z</published>
    <updated>2019-11-30T15:29:04.507Z</updated>
    
    <content type="html"><![CDATA[<font face="微软雅黑" size=4>**📍扰码器简介**</font><a id="more"></a><table><tr><td bgcolor=#F0F8FF>&#8195;&#8195;数字通信中，如果经常出现长的0或1序列，将会影响位同步的建立和保持。在发射机中使用扰码，可以<font color=red>避免这种数据对接收机定时的不利影响</font>。同时，为了限制电路中存在的不同程度的非线性特性对其他电路通信造成的串扰，<font color=red>要求数字信号的最小周期足够长</font>。将数字信号变换成<font color=red>具有近似于白噪声统计特性的数字序列</font>即可满足要求，这通常用加扰来实现。</td></tr></table><font face="黑体微软雅黑" size=4>**🎈原理**</font><blockquote><p>&#8195;&#8195;所谓加扰，就是<strong>不用增加冗余而扰乱信号</strong>，改变数字信号统计特性，使其具有近似白噪声统计特性的一种技术。在OFDM中，DATA域数据的处理，首先需要进行加扰操作。整个DATA域数据使用一个长度为127的帧同步扰码器加扰。8位PSDU数据帧转换成<strong>串行比特流</strong>，其中，LSB在前，MSB在最后。扰码器使用下列生成多项式:<script type="math/tex">\mathbf{S(x) = x^7 + x^4 + 1}</script>也就是将数据数据送入该多项式，然后输出。输出后的结果就是扰码之后的结果。该扰码器的最高幂是7，首先要定义一个7位非零的伪随机处置状态，比如说是 1011101。经过上面的多项式之后，生成一个127位的随机数。</p></blockquote><p><font face="黑体微软雅黑" size=4><strong>🎈实现</strong></font><br>&#8195;&#8195;扰码器可以用一个7位移位寄存器SCRAMBLER实现。扰码模块的模块框图和端口定义如下：<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/fimg/Picture1.png" alt="Picture1.png"></p><div class="table-container"><table><thead><tr><th style="text-align:center">端口名</th><th style="text-align:center">位宽</th><th style="text-align:center">输入/输出</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">SCRAM_DIN</td><td style="text-align:center">1</td><td style="text-align:center">Input</td><td style="text-align:center">扰码器输入信号</td></tr><tr><td style="text-align:center">SCRAM_ND</td><td style="text-align:center">1</td><td style="text-align:center">Input</td><td style="text-align:center">扰码器输入有效，与输入信号同步拉高</td></tr><tr><td style="text-align:center">SCRAM_LOAD</td><td style="text-align:center">1</td><td style="text-align:center">Input</td><td style="text-align:center">扰码器初始设置信号</td></tr><tr><td style="text-align:center">SCRAM_RST</td><td style="text-align:center">1</td><td style="text-align:center">Input</td><td style="text-align:center">复位信号，低电平有效</td></tr><tr><td style="text-align:center">SCRAM_CLK</td><td style="text-align:center">1</td><td style="text-align:center">Input</td><td style="text-align:center">时钟信号(60MHz)</td></tr><tr><td style="text-align:center">SCRAM_SEED</td><td style="text-align:center">7</td><td style="text-align:center">Input</td><td style="text-align:center">扰码器初始状态值，此处为7’b1011101</td></tr><tr><td style="text-align:center">SCRAM_DOUT</td><td style="text-align:center">1</td><td style="text-align:center">Output</td><td style="text-align:center">扰码器输出信号</td></tr><tr><td style="text-align:center">SCRAM_RDY</td><td style="text-align:center">1</td><td style="text-align:center">Output</td><td style="text-align:center">扰码器输出有效，与输出信号同步拉高</td></tr></tbody></table></div><p><font face="黑体微软雅黑" size=4><strong>🎈代码</strong></font><br>&#8195;&#8195;当扰码器初始设置信号SCRAM_LOAD为高电平时，扰码器被设置成一个非零的伪随机状态。此处取非零伪随机状态为SCRAM_SEED=1011101<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SCRAM_SEED = <span class="number">7</span><span class="string">'b1011101;</span></span><br><span class="line"><span class="string">if(SCRAM_LOAD)</span></span><br><span class="line"><span class="string">    SCRAMBLER &lt;= SCRAM_SEED;</span></span><br></pre></td></tr></table></figure><br>&#8195;&#8195;当扰码器输入有效信号SCRAM_ND为高电平时，每个时钟周期扰码器状态左移一位，并且第7位和第4位进行异或运算，所得的值一方面作为寄存器的输入，另一方面和输入的串行比特流进行异或运算得到加扰后的输出数据SCRAM_DOUT。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(SCRAM_ND)</span><br><span class="line">    begin</span><br><span class="line">        SCRAM_DOUT &lt;= SCRAM_DIN + data_temp[<span class="number">7</span>] + SCRAMBLER[<span class="number">4</span>];</span><br><span class="line">        SCRAMBLER &lt;= &#123;SCRAMBLER[<span class="number">6</span>:<span class="number">1</span>],data_temp[<span class="number">7</span>] + SCRAMBLER[<span class="number">4</span>]&#125;;</span><br><span class="line">    end</span><br></pre></td></tr></table></figure></p><p><font face="黑体微软雅黑" size=4><strong>🎈仿真结果</strong></font><br>&#8195;&#8195;对工程文件进行综合、布局、布线后仿真，得到如下图所示的仿真结果:<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/fimg/Picture2.png" alt="Picture2.png"><br>&#8195;&#8195;上图中，din是输入扰码器的两个Symbol，每个Symbol为144个bit;dout为扰码处理后的输出，同样输出两个Symbol的数据，每个Symbol有144个bit已扰码数据。</p><blockquote><p>&#8195;&#8195;将仿真通过的工程文件使用ChipScope添加观察信号采样时钟、触发信号和待观察信号后重新综合、布局布线生成bit文件，下载到目标板后用ChipScope进行在线测试，得到观测结果如下图所示。下图中的DIN对应上图中的din，下图中的DOUT对应上图中的dout。下图的在线测试结果与上图的后仿真结果吻合，验证了设计的正确性。</p></blockquote><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/fimg/Picture3.png" alt="Picture3.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;font face=&quot;微软雅黑&quot; size=4&gt;**📍扰码器简介**&lt;/font&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 8.基带信号发生控制器</title>
    <link href="http://pa.radonyl.xyz/2019/11/08/802-11g-Transmitter-8-controller/"/>
    <id>http://pa.radonyl.xyz/2019/11/08/802-11g-Transmitter-8-controller/</id>
    <published>2019-11-08T09:58:34.000Z</published>
    <updated>2019-12-01T12:21:04.538Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Controller-Port-defination"><a href="#Controller-Port-defination" class="headerlink" title="Controller Port defination"></a>Controller Port defination</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> tx_controller(</span><br><span class="line">    <span class="keyword">input</span> global_rst_n,</span><br><span class="line">    <span class="keyword">input</span> clk_sys,</span><br><span class="line">    <span class="comment">// Control</span></span><br><span class="line">    <span class="keyword">input</span> start_tx,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> busy,</span><br><span class="line">    <span class="comment">// Clock Gen</span></span><br><span class="line">    <span class="keyword">input</span> main_clk_locked,</span><br><span class="line">    <span class="keyword">input</span> clocks_locked,</span><br><span class="line">    <span class="comment">// Resets</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> reset_clocks,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> reset_phy,</span><br><span class="line">    <span class="comment">// Scrambler</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">1</span>] scrambler_seed,</span><br><span class="line">    <span class="comment">// Config AXI IO</span></span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] s_config_tdata,</span><br><span class="line">    <span class="keyword">input</span> s_config_tvalid,</span><br><span class="line">    <span class="comment">// Tx Control</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> load_signal_field,</span><br><span class="line">    <span class="keyword">input</span> send_data_field,</span><br><span class="line">    <span class="keyword">input</span> different_rate,</span><br><span class="line">    <span class="comment">// Frame Control</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> start_frame,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> start_ts,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> start_sig,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> start_data,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> end_frame</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="FSM"><a href="#FSM" class="headerlink" title="FSM"></a>FSM</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    next_state = state;</span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        <span class="comment">// INIT Phase: reset hardware, wait loading config</span></span><br><span class="line">        INIT0 : next_state = INIT1;</span><br><span class="line">        INIT1 : next_state = INIT2;</span><br><span class="line">        INIT2 : next_state = INIT3;</span><br><span class="line">        INIT3 : <span class="keyword">if</span> (s_config_tvalid) next_state = LOAD_SIG;</span><br><span class="line">                <span class="keyword">else</span> next_state = INIT3;</span><br><span class="line">        LOAD_SIG : next_state = SET_CLK;</span><br><span class="line">        SET_CLK : next_state = WAIT_CLK;</span><br><span class="line">        WAIT_CLK : <span class="keyword">if</span> (clocks_locked) next_state = PHY_RDY;</span><br><span class="line">                    <span class="keyword">else</span> next_state = WAIT_CLK;</span><br><span class="line">        <span class="comment">// TX Phase: wait tx command, then send payload</span></span><br><span class="line">        PHY_RDY : <span class="keyword">if</span> (start_tx) next_state = TX_HEADER;</span><br><span class="line">                    <span class="keyword">else</span> next_state = PHY_RDY;</span><br><span class="line">        TX_HEADER : <span class="keyword">if</span> (tx_header_counter &gt;= <span class="number">330</span>) next_state = TX_DATA;</span><br><span class="line">                    <span class="keyword">else</span> next_state = TX_HEADER;</span><br><span class="line">        TX_DATA: <span class="keyword">if</span> (!send_data_field) next_state = TX_END;</span><br><span class="line">                    <span class="keyword">else</span> next_state = TX_DATA;</span><br><span class="line">        TX_END : next_state = INIT3;</span><br><span class="line">        <span class="keyword">default</span>: next_state = INIT0;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">// output logic</span></span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">// reset_phy (active_low)</span></span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        INIT0, INIT1, INIT2: reset_phy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>: reset_phy = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line">    <span class="comment">// load_signal_field</span></span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        LOAD_SIG: load_signal_field = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">default</span>: load_signal_field = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line">    <span class="comment">// reset_clocks (active_high)</span></span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        SET_CLK: reset_clocks = (different_rate == <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">default</span>: reset_clocks = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line">    <span class="comment">// tx_header</span></span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        TX_HEADER: tx_header = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">default</span>:   tx_header = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line">    <span class="comment">// end_frame</span></span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        TX_END:  end_frame = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">default</span>: end_frame = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line">    <span class="comment">// busy</span></span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        PHY_RDY: busy = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">default</span>: busy = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Timing-Counters"><a href="#Timing-Counters" class="headerlink" title="Timing Counters"></a>Timing Counters</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Transmitt Timing</span></span><br><span class="line"><span class="comment">// to clk_sys 20m</span></span><br><span class="line"><span class="keyword">parameter</span> START_TS_OFFSET = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">parameter</span> START_TS_DURATION = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// to clk_cb_10m 10m</span></span><br><span class="line"><span class="keyword">parameter</span> START_SIG_OFFSET = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">parameter</span> START_SIG_DURATION = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// to clk_cb 10m~90m</span></span><br><span class="line"><span class="keyword">parameter</span> START_DATA_OFFSET = <span class="number">77</span>;</span><br><span class="line"><span class="keyword">parameter</span> START_DATA_DURATION = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">// start frame</span></span><br><span class="line">    <span class="keyword">if</span> (tx_header_counter &lt; <span class="number">4</span> &amp;&amp; tx_header) start_frame = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> start_frame = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// traininig sequence</span></span><br><span class="line">    <span class="keyword">if</span> (tx_header_counter &gt;= START_TS_OFFSET &amp;&amp;</span><br><span class="line">        tx_header_counter &lt; START_TS_OFFSET + START_TS_DURATION) start_ts = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> start_ts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// signal field</span></span><br><span class="line">    <span class="keyword">if</span> (tx_header_counter &gt;= START_SIG_OFFSET &amp;&amp;</span><br><span class="line">        tx_header_counter &lt; START_SIG_OFFSET + START_SIG_DURATION) start_sig = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> start_sig = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// data field</span></span><br><span class="line">    <span class="keyword">if</span> (tx_header_counter &gt;= START_DATA_OFFSET &amp;&amp;</span><br><span class="line">        tx_header_counter &lt; START_DATA_OFFSET + START_DATA_DURATION) start_data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> start_data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// header counter</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk_sys <span class="keyword">or</span> <span class="keyword">negedge</span> global_rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!global_rst_n) <span class="keyword">begin</span></span><br><span class="line">        tx_header_counter &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (tx_header) <span class="keyword">begin</span></span><br><span class="line">            tx_header_counter &lt;= tx_header_counter + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> tx_header_counter &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Controller-Simulation"><a href="#Controller-Simulation" class="headerlink" title="Controller Simulation"></a>Controller Simulation</h4><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/tx-controller-modelsim-1" alt="tx-controller-modelsim-1"><br>发射机就是状态机+按时序产生信号</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Controller-Port-defination&quot;&gt;&lt;a href=&quot;#Controller-Port-defination&quot; class=&quot;headerlink&quot; title=&quot;Controller Port defination&quot;&gt;&lt;/a&gt;Controll
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 7.加窗</title>
    <link href="http://pa.radonyl.xyz/2019/11/07/802-11g-Transmitter-7-windowing/"/>
    <id>http://pa.radonyl.xyz/2019/11/07/802-11g-Transmitter-7-windowing/</id>
    <published>2019-11-07T09:12:13.000Z</published>
    <updated>2019-12-01T12:20:12.463Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Windowing-Port-defination"><a href="#Windowing-Port-defination" class="headerlink" title="Windowing Port defination"></a>Windowing Port defination</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> windowing_combiner(</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> clk_sys,</span><br><span class="line">    <span class="keyword">input</span> start_frame,</span><br><span class="line">    <span class="keyword">input</span> end_frame,</span><br><span class="line">    <span class="comment">// Training Seq Input</span></span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">signed</span> [<span class="number">7</span>:<span class="number">0</span>] ts_re,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">signed</span> [<span class="number">7</span>:<span class="number">0</span>] ts_im,</span><br><span class="line">    <span class="keyword">input</span> ts_en,</span><br><span class="line">    <span class="keyword">input</span> ts_last,</span><br><span class="line">    <span class="comment">// IFFT Input</span></span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">signed</span> [<span class="number">7</span>:<span class="number">0</span>] ifft_re,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">signed</span> [<span class="number">7</span>:<span class="number">0</span>] ifft_im,</span><br><span class="line">    <span class="keyword">input</span> ifft_en,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] ifft_index,</span><br><span class="line">    <span class="comment">// Tx Output</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> <span class="keyword">signed</span> [<span class="number">7</span>:<span class="number">0</span>] tx_re,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> <span class="keyword">signed</span> [<span class="number">7</span>:<span class="number">0</span>] tx_im,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> tx_valid</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="Windowing"><a href="#Windowing" class="headerlink" title="Windowing"></a>Windowing</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">    save_first_val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">case</span> (state)</span><br><span class="line">        IDLE : <span class="keyword">begin</span></span><br><span class="line">            mux_out_re = <span class="number">0</span>;</span><br><span class="line">            mux_out_im = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        MUX_TS : <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (ts_last) <span class="keyword">begin</span></span><br><span class="line">                mux_out_re = ts_re + (ifft_re &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                mux_out_im = ts_im + (ifft_im &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                mux_out_re = ts_re;</span><br><span class="line">                mux_out_im = ts_im;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        MUX_IFFT : <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (last_ifft_index == <span class="number">63</span> &amp;&amp; ifft_index == <span class="number">0</span>) <span class="keyword">begin</span></span><br><span class="line">                save_first_val = <span class="number">1</span>;</span><br><span class="line">                mux_out_re = ifft_re;</span><br><span class="line">                mux_out_im = ifft_im;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (last_ifft_index == <span class="number">63</span> &amp;&amp; ifft_index == <span class="number">48</span>) <span class="keyword">begin</span></span><br><span class="line">                mux_out_re = (ifft_re &gt;&gt;&gt; <span class="number">1</span>) + first_ifft_re;</span><br><span class="line">                mux_out_im = (ifft_im &gt;&gt;&gt; <span class="number">1</span>) + first_ifft_im;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                mux_out_re = ifft_re;</span><br><span class="line">                mux_out_im = ifft_im;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">begin</span></span><br><span class="line">            mux_out_re = <span class="number">0</span>;</span><br><span class="line">            mux_out_im = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">// Save Value</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk_sys <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        first_ifft_re &lt;= <span class="number">0</span>;</span><br><span class="line">        first_ifft_im &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (save_first_val) <span class="keyword">begin</span></span><br><span class="line">            first_ifft_re &lt;= mux_out_re &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            first_ifft_im &lt;= mux_out_im &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk_sys <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        tx_re &lt;= <span class="number">0</span>;</span><br><span class="line">        tx_im &lt;= <span class="number">0</span>;</span><br><span class="line">        tx_valid &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        tx_re &lt;= mux_out_re;</span><br><span class="line">        tx_im &lt;= mux_out_im;</span><br><span class="line">        tx_valid &lt;= ifft_en | ts_en;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Windowing-Simulation"><a href="#Windowing-Simulation" class="headerlink" title="Windowing Simulation"></a>Windowing Simulation</h4><p>不用第一张<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/window-combiner-modelsim-1" alt="window-combiner-modelsim-1"></p><p>第二张:<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/window-combiner-modelsim-2" alt="window-combiner-modelsim-2"><br>可见加窗模块将训练序列与后续OFDM符号序列合并在一起,且每个Symbol均储存第一个值,用于加窗(把左边裁一下)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Windowing-Port-defination&quot;&gt;&lt;a href=&quot;#Windowing-Port-defination&quot; class=&quot;headerlink&quot; title=&quot;Windowing Port defination&quot;&gt;&lt;/a&gt;Windowing P
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 6.IFFT</title>
    <link href="http://pa.radonyl.xyz/2019/11/06/802-11g-Transmitter-6-ifft/"/>
    <id>http://pa.radonyl.xyz/2019/11/06/802-11g-Transmitter-6-ifft/</id>
    <published>2019-11-06T09:12:03.000Z</published>
    <updated>2019-12-01T12:20:25.263Z</updated>
    
    <content type="html"><![CDATA[<h4 id="IFFF-Port-defination"><a href="#IFFF-Port-defination" class="headerlink" title="IFFF Port defination"></a>IFFF Port defination</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> stream_ifft(</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> clk_din,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] din_re,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] din_im,</span><br><span class="line">    <span class="keyword">input</span> din_valid,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] dout_re,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] dout_im,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">5</span>:<span class="number">0</span>] dout_index,</span><br><span class="line">    <span class="keyword">output</span> dout_valid</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="IFFT-IP-core-and-its-configuration"><a href="#IFFT-IP-core-and-its-configuration" class="headerlink" title="IFFT IP core and its configuration"></a>IFFT IP core and its configuration</h4><p>对IP核进行基本的配置，包括缩放系数、转换方向和循环前缀长度<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FFT core</span></span><br><span class="line">xfft_0 IFFT (</span><br><span class="line">    <span class="variable">.aclk</span>(clk_din),                                                <span class="comment">// input wire aclk</span></span><br><span class="line">    <span class="variable">.aresetn</span>(rst_n),                                          <span class="comment">// input wire aresetn</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">.s_axis_config_tdata</span>(s_axis_config_tdata),                  <span class="comment">// input wire [15 : 0] s_axis_config_tdata</span></span><br><span class="line">    <span class="variable">.s_axis_config_tvalid</span>(s_axis_config_tvalid),                <span class="comment">// input wire s_axis_config_tvalid</span></span><br><span class="line">    <span class="variable">.s_axis_config_tready</span>(s_axis_config_tready),                <span class="comment">// output wire s_axis_config_tready</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">.s_axis_data_tdata</span>(s_axis_data_tdata),                      <span class="comment">// input wire [31 : 0] s_axis_data_tdata</span></span><br><span class="line">    <span class="variable">.s_axis_data_tvalid</span>(s_axis_data_tvalid),                    <span class="comment">// input wire s_axis_data_tvalid</span></span><br><span class="line">    <span class="variable">.s_axis_data_tready</span>(s_axis_data_tready),                    <span class="comment">// output wire s_axis_data_tready</span></span><br><span class="line">    <span class="variable">.s_axis_data_tlast</span>(s_axis_data_tlast),                      <span class="comment">// input wire s_axis_data_tlast</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Transform result</span></span><br><span class="line">    <span class="variable">.m_axis_data_tdata</span>(m_axis_data_tdata),                      <span class="comment">// output wire [31 : 0] m_axis_data_tdata</span></span><br><span class="line">    <span class="comment">// Index output</span></span><br><span class="line">    <span class="variable">.m_axis_data_tuser</span>(m_axis_data_tuser),                      <span class="comment">// output wire [15 : 0] m_axis_data_tuser</span></span><br><span class="line">    <span class="variable">.m_axis_data_tvalid</span>(m_axis_data_tvalid),                    <span class="comment">// output wire m_axis_data_tvalid</span></span><br><span class="line">    <span class="variable">.m_axis_data_tready</span>(m_axis_data_tready),                    <span class="comment">// input wire m_axis_data_tready</span></span><br><span class="line">    <span class="variable">.m_axis_data_tlast</span>(m_axis_data_tlast),                      <span class="comment">// output wire m_axis_data_tlast</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Overflow AXI (not used)</span></span><br><span class="line">    <span class="variable">.m_axis_status_tdata</span>(m_axis_status_tdata),                  <span class="comment">// output wire [7 : 0] m_axis_status_tdata</span></span><br><span class="line">    <span class="variable">.m_axis_status_tvalid</span>(m_axis_status_tvalid),                <span class="comment">// output wire m_axis_status_tvalid</span></span><br><span class="line">    <span class="variable">.m_axis_status_tready</span>(m_axis_status_tready),                <span class="comment">// input wire m_axis_status_tready</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Events</span></span><br><span class="line">    <span class="variable">.event_frame_started</span>(event_frame_started),                  <span class="comment">// output wire event_frame_started</span></span><br><span class="line">    <span class="variable">.event_tlast_unexpected</span>(event_tlast_unexpected),            <span class="comment">// output wire event_tlast_unexpected</span></span><br><span class="line">    <span class="variable">.event_tlast_missing</span>(event_tlast_missing),                  <span class="comment">// output wire event_tlast_missing</span></span><br><span class="line">    <span class="variable">.event_fft_overflow</span>(event_fft_overflow),                    <span class="comment">// output wire event_fft_overflow</span></span><br><span class="line">    <span class="variable">.event_status_channel_halt</span>(event_status_channel_halt),      <span class="comment">// output wire event_status_channel_halt</span></span><br><span class="line">    <span class="variable">.event_data_in_channel_halt</span>(event_data_in_channel_halt),    <span class="comment">// output wire event_data_in_channel_halt</span></span><br><span class="line">    <span class="variable">.event_data_out_channel_halt</span>(event_data_out_channel_halt)  <span class="comment">// output wire event_data_out_channel_halt</span></span><br><span class="line">    );</span><br><span class="line"><span class="comment">// configuration</span></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk_din <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        s_axis_config_tvalid &lt;= <span class="number">0</span>;</span><br><span class="line">        s_axis_config_tdata &lt;= &#123;<span class="number">1'b0</span>, <span class="number">6'b101110</span>, <span class="number">1'b0</span>, <span class="number">2'b00</span>, <span class="number">6'b010000</span>&#125;; <span class="comment">// SCALE_SCH=10 11 10 IFFT CP_LEN=16</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s_axis_config_tready) <span class="keyword">begin</span></span><br><span class="line">        s_axis_config_tvalid &lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        s_axis_config_tvalid &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h4 id="IFFT-Simulation"><a href="#IFFT-Simulation" class="headerlink" title="IFFT Simulation"></a>IFFT Simulation</h4><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/ifft-modelsim-part-1" alt="ifft-modelsim-part-1"></p><p>可见输出包括了循环前缀（IP核功能），且存在一定的时延</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;IFFF-Port-defination&quot;&gt;&lt;a href=&quot;#IFFF-Port-defination&quot; class=&quot;headerlink&quot; title=&quot;IFFF Port defination&quot;&gt;&lt;/a&gt;IFFF Port defination&lt;/h4&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 5.插入导频</title>
    <link href="http://pa.radonyl.xyz/2019/11/05/802-11g-Transmitter-5-pilot-aboard/"/>
    <id>http://pa.radonyl.xyz/2019/11/05/802-11g-Transmitter-5-pilot-aboard/</id>
    <published>2019-11-05T09:11:50.000Z</published>
    <updated>2019-12-01T12:19:19.758Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Pilot-Aboard-Port-defination"><a href="#Pilot-Aboard-Port-defination" class="headerlink" title="Pilot Aboard Port defination"></a>Pilot Aboard Port defination</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> stream_pilot_aboard(</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> start_frame,</span><br><span class="line">    <span class="keyword">input</span> din_valid,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] din_re,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] din_im,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] din_index,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] dout_re,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] dout_im,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> dout_valid</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="OFDM-Modulation"><a href="#OFDM-Modulation" class="headerlink" title="OFDM Modulation"></a>OFDM Modulation</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> (din_index_buf) <span class="comment">// iFFT sub-carrier map</span></span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>:</span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= din_index_buf + <span class="number">38</span>;</span><br><span class="line">    <span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>:</span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= din_index_buf + <span class="number">39</span>;</span><br><span class="line">    <span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>: </span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= din_index_buf + <span class="number">40</span>;</span><br><span class="line">    <span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>:</span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= din_index_buf - <span class="number">23</span>; </span><br><span class="line">    <span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>:</span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= din_index_buf - <span class="number">22</span>;</span><br><span class="line">    <span class="number">43</span>,<span class="number">44</span>,<span class="number">45</span>,<span class="number">46</span>,<span class="number">47</span> : </span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= din_index_buf - <span class="number">21</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">endcase</span></span><br></pre></td></tr></table></figure><h4 id="Pilot-Insertion"><a href="#Pilot-Insertion" class="headerlink" title="Pilot Insertion"></a>Pilot Insertion</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> (pilot_postion)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1 -1  1  1</span></span><br><span class="line"><span class="comment">       -1  1 -1 -1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="number">2'b00</span>: <span class="keyword">begin</span></span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">if</span> (!pilot_polarity)</span><br><span class="line">            ram_din_re &lt;= <span class="number">8'b01000000</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ram_din_re &lt;= <span class="number">8'b11000000</span>;</span><br><span class="line">        pilot_postion &lt;= pilot_postion + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="number">2'b01</span>: <span class="keyword">begin</span></span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= <span class="number">21</span>;</span><br><span class="line">        <span class="keyword">if</span> (!pilot_polarity)</span><br><span class="line">            ram_din_re &lt;= <span class="number">8'b11000000</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ram_din_re &lt;= <span class="number">8'b01000000</span>;</span><br><span class="line">        pilot_postion &lt;= pilot_postion + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="number">2'b10</span>: <span class="keyword">begin</span></span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= <span class="number">43</span>;</span><br><span class="line">        <span class="keyword">if</span> (!pilot_polarity)</span><br><span class="line">            ram_din_re &lt;= <span class="number">8'b01000000</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ram_din_re &lt;= <span class="number">8'b11000000</span>;</span><br><span class="line">        pilot_postion &lt;= pilot_postion + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="number">2'b11</span>: <span class="keyword">begin</span></span><br><span class="line">        write_addr[<span class="number">5</span>:<span class="number">0</span>] &lt;= <span class="number">57</span>;</span><br><span class="line">        <span class="keyword">if</span> (!pilot_polarity)</span><br><span class="line">            ram_din_re &lt;= <span class="number">8'b01000000</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ram_din_re &lt;= <span class="number">8'b11000000</span>;</span><br><span class="line">        pilot_postion &lt;= <span class="number">0</span>;</span><br><span class="line">        pilot_aboard_start &lt;= <span class="number">0</span>;</span><br><span class="line">        read_en &lt;= <span class="number">1</span>;</span><br><span class="line">        write_addr_sel &lt;= ~write_addr_sel;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endcase</span></span><br></pre></td></tr></table></figure><h4 id="Simulation"><a href="#Simulation" class="headerlink" title="Simulation"></a>Simulation</h4><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/pilot-aboard-isim-1" alt="pilot-aboard-isim-1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Pilot-Aboard-Port-defination&quot;&gt;&lt;a href=&quot;#Pilot-Aboard-Port-defination&quot; class=&quot;headerlink&quot; title=&quot;Pilot Aboard Port defination&quot;&gt;&lt;/a&gt;Pi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 4.星座映射</title>
    <link href="http://pa.radonyl.xyz/2019/11/04/802-11g-Transmitter-4-constellation/"/>
    <id>http://pa.radonyl.xyz/2019/11/04/802-11g-Transmitter-4-constellation/</id>
    <published>2019-11-04T09:10:27.000Z</published>
    <updated>2019-12-01T12:17:26.296Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Constellation-Port-defination"><a href="#Constellation-Port-defination" class="headerlink" title="Constellation Port defination"></a>Constellation Port defination</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> stream_constellate(</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> din,</span><br><span class="line">    <span class="keyword">input</span> en,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] sig_rate,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] re,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] im,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] index,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> data_valid</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h4 id="Constellation"><a href="#Constellation" class="headerlink" title="Constellation"></a>Constellation</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// constellation map</span></span><br><span class="line"><span class="keyword">reg</span> map_valid;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] re_temp;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] im_temp;</span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">        re_temp &lt;= <span class="number">0</span>;</span><br><span class="line">        im_temp &lt;= <span class="number">0</span>;</span><br><span class="line">        map_valid &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (buf_data_valid) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">case</span> (sig_rate)</span><br><span class="line">                <span class="comment">// BPSK</span></span><br><span class="line">                <span class="number">4'b1101</span>, <span class="number">4'b1111</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="comment">// Scaler=1</span></span><br><span class="line">                    <span class="keyword">case</span> (pre_map_buffer[<span class="number">0</span>])</span><br><span class="line">                        <span class="number">1'b0</span>: re_temp &lt;= <span class="number">8'b11000000</span>; <span class="comment">// -1</span></span><br><span class="line">                        <span class="number">1'b1</span>: re_temp &lt;= <span class="number">8'b01000000</span>; <span class="comment">// 1</span></span><br><span class="line">                    <span class="keyword">endcase</span></span><br><span class="line">                    im_temp &lt;= <span class="number">0</span>;</span><br><span class="line">                    map_valid &lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">// QPSK</span></span><br><span class="line">                <span class="number">4'b0101</span>, <span class="number">4'b0111</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="comment">// Scaler=sqrt(2)</span></span><br><span class="line">                    <span class="keyword">case</span> (pre_map_buffer[<span class="number">0</span>])</span><br><span class="line">                        <span class="number">1'b0</span>: re_temp &lt;= <span class="number">8'b11010011</span>; <span class="comment">// -1</span></span><br><span class="line">                        <span class="number">1'b1</span>: re_temp &lt;= <span class="number">8'b00101101</span>; <span class="comment">// 1</span></span><br><span class="line">                    <span class="keyword">endcase</span></span><br><span class="line">                    <span class="keyword">case</span> (pre_map_buffer[<span class="number">1</span>])</span><br><span class="line">                        <span class="number">1'b0</span>: im_temp &lt;= <span class="number">8'b11010011</span>; <span class="comment">// -1</span></span><br><span class="line">                        <span class="number">1'b1</span>: im_temp &lt;= <span class="number">8'b00101101</span>; <span class="comment">// 1</span></span><br><span class="line">                    <span class="keyword">endcase</span></span><br><span class="line">                    map_valid &lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">// 16QAM</span></span><br><span class="line">                <span class="number">4'b1001</span>, <span class="number">4'b1011</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="comment">// Scaler=sqrt(10)</span></span><br><span class="line">                    <span class="keyword">case</span> (pre_map_buffer[<span class="number">1</span>:<span class="number">0</span>])</span><br><span class="line">                        <span class="number">2'b00</span>: re_temp &lt;= <span class="number">8'b11000011</span>; <span class="comment">// -3</span></span><br><span class="line">                        <span class="number">2'b10</span>: re_temp &lt;= <span class="number">8'b11101100</span>; <span class="comment">// -1</span></span><br><span class="line">                        <span class="number">2'b11</span>: re_temp &lt;= <span class="number">8'b00010100</span>; <span class="comment">// 1</span></span><br><span class="line">                        <span class="number">2'b01</span>: re_temp &lt;= <span class="number">8'b00111101</span>; <span class="comment">// 3</span></span><br><span class="line">                    <span class="keyword">endcase</span></span><br><span class="line">                    <span class="keyword">case</span> (pre_map_buffer[<span class="number">3</span>:<span class="number">2</span>])</span><br><span class="line">                        <span class="number">2'b00</span>: im_temp &lt;= <span class="number">8'b11000011</span>; <span class="comment">// -3</span></span><br><span class="line">                        <span class="number">2'b10</span>: im_temp &lt;= <span class="number">8'b11101100</span>; <span class="comment">// -1</span></span><br><span class="line">                        <span class="number">2'b11</span>: im_temp &lt;= <span class="number">8'b00010100</span>; <span class="comment">// 1</span></span><br><span class="line">                        <span class="number">2'b01</span>: im_temp &lt;= <span class="number">8'b00111101</span>; <span class="comment">// 3</span></span><br><span class="line">                    <span class="keyword">endcase</span></span><br><span class="line">                    map_valid &lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">// 64QAM</span></span><br><span class="line">                <span class="number">4'b0001</span>, <span class="number">4'b0011</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="comment">// Scaler=sqrt(42)</span></span><br><span class="line">                    <span class="keyword">case</span> (pre_map_buffer[<span class="number">2</span>:<span class="number">0</span>])</span><br><span class="line">                        <span class="number">3'b000</span>: re_temp &lt;= <span class="number">8'b10111011</span>; <span class="comment">// -7</span></span><br><span class="line">                        <span class="number">3'b001</span>: re_temp &lt;= <span class="number">8'b11001111</span>; <span class="comment">// -5</span></span><br><span class="line">                        <span class="number">3'b011</span>: re_temp &lt;= <span class="number">8'b11100010</span>; <span class="comment">// -3</span></span><br><span class="line">                        <span class="number">3'b010</span>: re_temp &lt;= <span class="number">8'b11110110</span>; <span class="comment">// -1</span></span><br><span class="line">                        <span class="number">3'b110</span>: re_temp &lt;= <span class="number">8'b00001010</span>; <span class="comment">// 1</span></span><br><span class="line">                        <span class="number">3'b111</span>: re_temp &lt;= <span class="number">8'b00011110</span>; <span class="comment">// 3</span></span><br><span class="line">                        <span class="number">3'b101</span>: re_temp &lt;= <span class="number">8'b00110001</span>; <span class="comment">// 5</span></span><br><span class="line">                        <span class="number">3'b100</span>: re_temp &lt;= <span class="number">8'b01000101</span>; <span class="comment">// 7</span></span><br><span class="line">                    <span class="keyword">endcase</span></span><br><span class="line">                    <span class="keyword">case</span> (pre_map_buffer[<span class="number">5</span>:<span class="number">3</span>])</span><br><span class="line">                        <span class="number">3'b000</span>: im_temp &lt;= <span class="number">8'b10111011</span>; <span class="comment">// -7</span></span><br><span class="line">                        <span class="number">3'b001</span>: im_temp &lt;= <span class="number">8'b11001111</span>; <span class="comment">// -5</span></span><br><span class="line">                        <span class="number">3'b011</span>: im_temp &lt;= <span class="number">8'b11100010</span>; <span class="comment">// -3</span></span><br><span class="line">                        <span class="number">3'b010</span>: im_temp &lt;= <span class="number">8'b11110110</span>; <span class="comment">// -1</span></span><br><span class="line">                        <span class="number">3'b110</span>: im_temp &lt;= <span class="number">8'b00001010</span>; <span class="comment">// 1</span></span><br><span class="line">                        <span class="number">3'b111</span>: im_temp &lt;= <span class="number">8'b00011110</span>; <span class="comment">// 3</span></span><br><span class="line">                        <span class="number">3'b101</span>: im_temp &lt;= <span class="number">8'b00110001</span>; <span class="comment">// 5</span></span><br><span class="line">                        <span class="number">3'b100</span>: im_temp &lt;= <span class="number">8'b01000101</span>; <span class="comment">// 7</span></span><br><span class="line">                    <span class="keyword">endcase</span></span><br><span class="line">                    map_valid &lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">// Invalid SIG_RATE input!</span></span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">begin</span></span><br><span class="line">                    re_temp &lt;= <span class="number">0</span>;</span><br><span class="line">                    im_temp &lt;= <span class="number">0</span>;</span><br><span class="line">                    map_valid &lt;= <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            map_valid &lt;= <span class="number">0</span>;</span><br><span class="line">            re_temp &lt;= <span class="number">0</span>;</span><br><span class="line">            im_temp &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>BPSK modulation simulation<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/bpsk-mod-isim-1" alt="bpsk-mod-isim-1"></p><p>QPSK<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/qpsk-mod-isim-1" alt="qpsk-mod-isim-1"></p><p>16QAM<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/16qam-mod-isim-1" alt="16qam-mod-isim-1"></p><p>64QAM<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/64qam-mod-isim-1" alt="64qam-mod-isim-1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Constellation-Port-defination&quot;&gt;&lt;a href=&quot;#Constellation-Port-defination&quot; class=&quot;headerlink&quot; title=&quot;Constellation Port defination&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 3.交织</title>
    <link href="http://pa.radonyl.xyz/2019/11/03/802-11g-Transmitter-3-interleaver/"/>
    <id>http://pa.radonyl.xyz/2019/11/03/802-11g-Transmitter-3-interleaver/</id>
    <published>2019-11-03T09:10:04.000Z</published>
    <updated>2019-12-01T12:19:27.361Z</updated>
    
    <content type="html"><![CDATA[<p>交织器输入输出端口<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> stream_interleaver(</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> din,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">8</span>:<span class="number">0</span>] din_index,</span><br><span class="line">    <span class="keyword">input</span> en,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] sig_rate,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> dout,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> data_valid</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><br>交织器代码(第一级交织写入地址生成)<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BPSK 48</span></span><br><span class="line"><span class="number">4'b1101</span>, <span class="number">4'b1111</span>: <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (!write_addr_sel_1)</span><br><span class="line">        write_addr_1 &lt;= din_index[<span class="number">3</span>:<span class="number">0</span>] + (din_index[<span class="number">3</span>:<span class="number">0</span>] &lt;&lt; <span class="number">1</span>) + din_index[<span class="number">5</span>:<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        write_addr_1 &lt;= din_index[<span class="number">3</span>:<span class="number">0</span>] + (din_index[<span class="number">3</span>:<span class="number">0</span>] &lt;&lt; <span class="number">1</span>) + din_index[<span class="number">5</span>:<span class="number">4</span>] + <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">if</span> (din_index == <span class="number">47</span>) <span class="keyword">begin</span></span><br><span class="line">        write_addr_sel_1 &lt;= ~write_addr_sel_1;</span><br><span class="line">        read_en_1 &lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><br>交织器代码(第二级交织写入地址生成)<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BPSK QPSK no need for 2nd itv</span></span><br><span class="line"><span class="number">4'b1101</span>, <span class="number">4'b1111</span>, <span class="number">4'b0101</span>, <span class="number">4'b0111</span>: <span class="keyword">begin</span></span><br><span class="line">    write_addr_2 &lt;= din_index_2;</span><br><span class="line">    <span class="keyword">if</span> (din_index_2 == <span class="number">11</span> || din_index_2 == <span class="number">23</span>) <span class="keyword">begin</span></span><br><span class="line">        read_en_2 &lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> (din_index_2 &lt; <span class="number">23</span>)</span><br><span class="line">        din_index_2 &lt;= din_index_2 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        din_index_2 &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><br>仿真结果<br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/interleaver-isim-1" alt="interleaver-isim-1"></p><p>由于交织的特性，可见交织必须等数据全部写入后才可以读出，这里为发射机引入了时延</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;交织器输入输出端口&lt;br&gt;&lt;figure class=&quot;highlight verilog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 2.卷积编码</title>
    <link href="http://pa.radonyl.xyz/2019/11/02/802-11g-Transmitter-2-conv-encoder/"/>
    <id>http://pa.radonyl.xyz/2019/11/02/802-11g-Transmitter-2-conv-encoder/</id>
    <published>2019-11-02T09:08:49.000Z</published>
    <updated>2019-12-01T12:42:08.256Z</updated>
    
    <content type="html"><![CDATA[<p>卷积编码器输入输出端口<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> stream_conv_encode(<span class="keyword">input</span> rst_n,</span><br><span class="line">                          <span class="keyword">input</span> start_frame,</span><br><span class="line">                          <span class="keyword">input</span> clk_din,</span><br><span class="line">                          <span class="keyword">input</span> clk_dout,</span><br><span class="line">                          <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] sig_rate,</span><br><span class="line">                          <span class="keyword">input</span> din,</span><br><span class="line">                          <span class="keyword">input</span> en,</span><br><span class="line">                          <span class="keyword">output</span> <span class="keyword">reg</span> dout,</span><br><span class="line">                          <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">8</span>:<span class="number">0</span>] index,</span><br><span class="line">                          <span class="keyword">output</span> <span class="keyword">reg</span> data_valid);</span><br></pre></td></tr></table></figure></p><p>卷积编码器核心代码如下：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> conv_encoder(<span class="keyword">input</span> rst_n,</span><br><span class="line">                    <span class="keyword">input</span> clk,</span><br><span class="line">                    <span class="keyword">input</span> din,</span><br><span class="line">                    <span class="keyword">input</span> en,</span><br><span class="line">                    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] dout,</span><br><span class="line">                    <span class="keyword">output</span> <span class="keyword">reg</span> data_valid);</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">1</span>] shift_reg;</span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">            shift_reg  &lt;= <span class="number">6'd0</span>;</span><br><span class="line">            dout       &lt;= <span class="number">2'd0</span>;</span><br><span class="line">            data_valid &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (en) <span class="keyword">begin</span></span><br><span class="line">                dout[<span class="number">0</span>]    &lt;= shift_reg[<span class="number">6</span>] + shift_reg[<span class="number">5</span>] + shift_reg[<span class="number">3</span>] + shift_reg[<span class="number">2</span>] + din;</span><br><span class="line">                dout[<span class="number">1</span>]    &lt;= shift_reg[<span class="number">6</span>] + shift_reg[<span class="number">3</span>] + shift_reg[<span class="number">2</span>] + shift_reg[<span class="number">1</span>] + din;</span><br><span class="line">                data_valid &lt;= <span class="number">1</span>;</span><br><span class="line">                shift_reg  &lt;= &#123;shift_reg[<span class="number">5</span>:<span class="number">1</span>], din&#125;;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                data_valid &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></p><h4 id="仿真图像"><a href="#仿真图像" class="headerlink" title="仿真图像"></a>仿真图像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由IEEE802.11-2007附录G</span><br><span class="line">// 输入序列为</span><br><span class="line">24&apos;b101100010011000000000000</span><br><span class="line">// 输出序列应为</span><br><span class="line">48&apos;b110100011010000100000010001111100111000000000000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/conv-encoder-isim-1" alt="conv-encoder-isim-1"></p><p>可见仿真与理论相吻合</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;卷积编码器输入输出端口&lt;br&gt;&lt;figure class=&quot;highlight verilog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>📡 802.11g 发射机 | 1. 扰码</title>
    <link href="http://pa.radonyl.xyz/2019/11/01/802-11g-Transmitter-1-Scrambler/"/>
    <id>http://pa.radonyl.xyz/2019/11/01/802-11g-Transmitter-1-Scrambler/</id>
    <published>2019-11-01T14:46:32.000Z</published>
    <updated>2019-12-01T12:36:03.481Z</updated>
    
    <content type="html"><![CDATA[<p>扰码器（Sreambler）是什么？扰码是本质上是将需要传输的数据进行随机化处理，通过把输入数据“耦合”到一个随机序列上来实现，而序列的随机性能就保证通信性能的平稳性。<br><a id="more"></a></p><p>802.11-2007 <strong>17.3.5.4 PLCP DATA scrambler and descrambler</strong>规定DATA field应该使用一个长127的帧同步扰码器进行扰码，该扰码器使用生成如下生成多项式：</p><script type="math/tex; mode=display">S(x)=x^7+x^4+1</script><p>这个生成多项式对应了一个反馈移位寄存器结构：</p><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/Figure-17-7-Data-scrambler" alt="Figure-17-7-Data-scrambler"></p><p>左侧的反馈移位寄存器构成了一个周期为127的随机序列发生器，其发生序列只与移位寄存器的初始状态有关，在初始状态全0的状态下其输出序列为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00001110 11110010 11001001 00000010 00100110 00101110</span><br><span class="line">10110110 00001100 11010100 11100111 10110100 00101010 </span><br><span class="line">11111010 01010001 10111000 1111111</span><br></pre></td></tr></table></figure><br>随机序列与输入序列进行异或运算得出扰码序列，在接收端使用同样的随机序列与扰码序列异或即可恢复原输入序列，这里利用到的原理是：</p><script type="math/tex; mode=display">\begin{split}Trans(x) = & Input(x) \oplus S(x) \\\\Recv(x) = & Trans(x) \oplus S(x) \\\\= & Input(x) \oplus S(x) \oplus S(x) \\\\= & Input(x) \oplus 0 \\\\= & Input(x)\end{split}</script><p>由于随机序列只与移位寄存器的初始状态有关，只需要发射机与接收机约定使用共同的初始值，并且在每次发射前进行重置即可保证加扰序列可以在接收端进行解扰，802.11规定该初始值为1011101。</p><h1 id="Verilog实现"><a href="#Verilog实现" class="headerlink" title="Verilog实现"></a>Verilog实现</h1><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> stream_scramble(</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> din,</span><br><span class="line">    <span class="keyword">input</span> en,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">1</span>] seed,</span><br><span class="line">    <span class="keyword">input</span> start_frame,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">11</span>:<span class="number">0</span>] sig_length, <span class="comment">// used for zeroing tail bits</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> dout,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> data_valid</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">1</span>] scrambler;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">12</span>:<span class="number">0</span>] bit_counter;</span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!rst_n) <span class="keyword">begin</span></span><br><span class="line">            dout &lt;= <span class="number">0</span>;</span><br><span class="line">            data_valid &lt;= <span class="number">0</span>;</span><br><span class="line">            scrambler &lt;= <span class="number">0</span>;</span><br><span class="line">            bit_counter &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (start_frame) <span class="keyword">begin</span></span><br><span class="line">                scrambler &lt;= seed;</span><br><span class="line">                bit_counter &lt;= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (en) <span class="keyword">begin</span></span><br><span class="line">                    <span class="comment">// zeroing tail bits</span></span><br><span class="line">                    dout &lt;= (bit_counter &gt;= sig_length * <span class="number">8</span> + <span class="number">16</span> &amp;&amp; bit_counter &lt; sig_length * <span class="number">8</span> + <span class="number">22</span>) ? <span class="number">0</span> : </span><br><span class="line">                            din + scrambler[<span class="number">7</span>] + scrambler[<span class="number">4</span>];</span><br><span class="line">                    data_valid &lt;= <span class="number">1</span>;</span><br><span class="line">                    scrambler &lt;= &#123;scrambler[<span class="number">6</span>:<span class="number">1</span>], scrambler[<span class="number">7</span>] + scrambler[<span class="number">4</span>]&#125;;</span><br><span class="line">                    bit_counter &lt;= bit_counter + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                    dout &lt;= <span class="number">0</span>;</span><br><span class="line">                    data_valid &lt;= <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h4 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h4><p>将扰码器置于全1的初始值，在全0输入的情况下观察扰码器的输出，其序列应该满足：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00001110 11110010 11001001 00000010 00100110 00101110</span><br><span class="line">10110110 00001100 11010100 11100111 10110100 00101010 </span><br><span class="line">11111010 01010001 10111000 1111111</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/scrambler-isim-2" alt="scrambler-isim-2"><br>对比发现仿真与要求相吻合。</p><h4 id="基带数据与扰码器输出"><a href="#基带数据与扰码器输出" class="headerlink" title="基带数据与扰码器输出"></a>基带数据与扰码器输出</h4><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/baseband_bits" alt="baseband_bits"></p><h4 id="没有扰码器时"><a href="#没有扰码器时" class="headerlink" title="没有扰码器时"></a>没有扰码器时</h4><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/baseband_time_domin_without_scrambler" alt="baseband_time_domin_without_scrambler"></p><h4 id="添加扰码器后"><a href="#添加扰码器后" class="headerlink" title="添加扰码器后"></a>添加扰码器后</h4><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/baseband_time_domain_with_scrambler" alt="baseband_time_domain_with_scrambler"></p><p>在基带信号中，可见存在大量的连续的0和1，当没有扰码器时，产生的时域信号存在非常明显的周期性，且出现了大量的峰值，EVM恶化。在添加扰码器后情况明显改善。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扰码器（Sreambler）是什么？扰码是本质上是将需要传输的数据进行随机化处理，通过把输入数据“耦合”到一个随机序列上来实现，而序列的随机性能就保证通信性能的平稳性。&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Let&#39;s share</title>
    <link href="http://pa.radonyl.xyz/2019/11/01/Let-s-share/"/>
    <id>http://pa.radonyl.xyz/2019/11/01/Let-s-share/</id>
    <published>2019-11-01T03:03:54.000Z</published>
    <updated>2019-11-01T14:44:39.845Z</updated>
    
    <content type="html"><![CDATA[<div class="tip">    谨以此博客向所有执着于探索的人致敬</div><a id="more"></a><h1 id="The-Sunset"><a href="#The-Sunset" class="headerlink" title="The Sunset"></a>The Sunset</h1><p><em>选自日记2017年04月18日</em></p><p><img src="https://raw.githubusercontent.com/radonyl/pa_blog_img/master/img/20170418-南雅高三楼的日落" alt="20170418-南雅高三楼的日落"></p><p>今天有晚霞！<br>昨天开始，继续写日记，记住一些感动与瞬间。</p><blockquote><p>“感觉你今天变了个人，是不是哪根筋搭错了”</p></blockquote><p>🐂🌧️仙这么说。她还跑着去看我拍照的地方。</p><p>厚厚的云层压住半边天空，起初不出彩，待太阳角度压低，橘红色的火焰便烧尽了天空。看到这一幕，我便拿起手机夺门而出。可惜的是高三楼成功卡位，让我没拍出一张好看的照片。</p><p>太阳压低，原本强烈纯白的阳光也顺着气氛变得柔和金黄。</p><blockquote><p>“找一张太阳照得到的餐桌”—Waffle</p></blockquote><p>是的，此时千家万户的窗子都会涌出一股金流，洒在墙壁上、餐桌上和卧铺上。与此同时，从外面看，建筑的的外墙均被粉刷成亮丽的橙黄色，又拨动了我内心的那根“弦”。</p><p>阳光固然置人于绝望与希望的两重境地。可就今天来说，绝望是更多的。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;tip&quot;&gt;
    谨以此博客向所有执着于探索的人致敬
&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
